/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var dryCool = ee.ImageCollection("projects/servir-mekong/usgs_sr_composites/drycool"),
    cambodia = ee.FeatureCollection("users/thinkbetween/cambodia_update"),
    canopy = ee.ImageCollection("projects/servir-mekong/yearly_primitives_smoothed/tree_canopy"),
    treeHeight = ee.ImageCollection("projects/servir-mekong/yearly_primitives_smoothed/tree_height"),
    provinces = ee.FeatureCollection("projects/servir-mekong/CambodiaFireEmissions/KHM_Provinces"),
    PreyLang_KTH = ee.FeatureCollection("users/thinkbetween/PreyLang_KTH");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
////////////////////////////////////////////////////////////////////////////////////////////////
// Import necessary libraries 
////////////////////////////////////////////////////////////////////////////////////////////////

// Import the GTAC get image library - this will be used to join image collections
var getImageLib = require('users/USFS_GTAC/modules:getImagesLib.js');

////////////////////////////////////////////////////////////////////////////////////////////////
// Prepare the image composites for LandTrendr
////////////////////////////////////////////////////////////////////////////////////////////////

// Filter the dry cool image collection to get only the medoid images
var medoidCollection = dryCool.filter(ee.Filter.stringContains({leftField: 'compositingMethod', rightValue: 'Medoid'}));

//Bands or indexs used to fit LANDTRENDR
//Can include: 'blue','green','red','nir','swir1','swir2'
//'NBR','NDVI','wetness','greenness','brightness','tcAngleBG'
var indexName = 'nbr';

// define the sign of spectral delta for vegetation loss for the segmentation index - 
// NBR delta is negative for vegetation loss, so -1 for NBR, 1 for band 5, -1 for NDVI, etc
var dist_dir = -1;

// Generate medoid-based collection
var medoidIndex = medoidCollection.map(normalizedDifference)
                  .select(indexName)
                  .map(function(img){
                    var t = ee.Date(img.get('system:time_start'));
                    img = img.multiply(dist_dir);
                    return img.set('system:time_start',ee.Date.fromYMD(t.get('year'),6,1).millis());
                  });

////////////////////////////////////////////////////////////////////////////////////////////////
// User parameters to set
////////////////////////////////////////////////////////////////////////////////////////////////
// the map is set to center on Prey Lang
//Map.setCenter(105.49021789662868, 13.197978572450443, 9);

// Indicate the province name - now set to export for all of Cambodia
// Provinces are: Banteay Meanchey, Battambang, Kampot, Kampong Cham, Kampong Chhnang, Kampong Speu, Kampong Thom,
// Kandal, Koh Kong, Kep, Kratie, Pailin, Preah Sihanouk, Pursat, Mondulkiri, Oddarr Meanchey, Phnom Penh, Preah Vihear,
// Prey Veng, Ratanakiri, Siem Reap, Stung Treng, Svay Rieng, Takeo, Tbong Khmum
var provinceName = 'PreyLang_KTH';
var studyArea = PreyLang_KTH;

// UNCOMMENT THE buildArea() FUNCTION TO USE THE provinceName VARIABLE
// the buildArea function will filter the province of interest and center the map there
//var studyArea = buildArea();
Map.addLayer(studyArea, {}, provinceName, true);

// Location for Google Drive exports
var exportDriveFolder =  'DriveFolderHere';

// Location for Asset exports, can be '' if exporting to root of your assets. 
var exportCollection =  'stand_age';

//Indicate the start and end years of the annual composites
var start_year = 1986;
var end_year = 2017;

//Define landtrendr parameters
var run_params = {
  maxSegments:            6,
  spikeThreshold:         0.9,
  vertexCountOvershoot:   3,
  preventOneYearRecovery: true,
  recoveryThreshold:      0.25,
  pvalThreshold:          0.05,
  bestModelProportion:    0.75,
  minObservationsNeeded:  6
};

////////////////////////////////////////////////////////////////////////////////////////////////
// Run LandTrendr
////////////////////////////////////////////////////////////////////////////////////////////////

//Append the NBR collection to the landtrendr paramters
run_params.timeSeries = medoidIndex; 

//Run LandTrendr and add the results to the map
var lt_result = ee.Algorithms.TemporalSegmentation.LandTrendr(run_params);
Map.addLayer(lt_result, {}, 'lt result', false);

// work with the outputs
var lt_array = lt_result.select([0]);
var lt_year = lt_array.arraySlice(0,0,1).arrayProject([1]);
var lt_fitted = lt_array.arraySlice(0,2,3).arrayProject([1]);

// create an index collection that is not inverted
var medoidJoinIndex = medoidCollection.map(normalizedDifference)
                  .select(indexName)
                  .map(function(img){
                    var t = ee.Date(img.get('system:time_start'));
                    return img.set('system:time_start',ee.Date.fromYMD(t.get('year'),6,1).millis());
                  });
                  
//Join the fitted values to the raw values and add it to the map
var fittedCollection = arrayToTimeSeries(lt_fitted.multiply(-1),lt_year,ee.List.sequence(start_year,end_year),'LT_Fitted_NBR');
var jc = getImageLib.joinCollections(medoidJoinIndex, ee.ImageCollection(fittedCollection), false);
Map.addLayer(jc, {}, 'joined collection', false);

// slice out the vertices
var vertex_mask = lt_array.arraySlice(0,3,4);
// mask out all values that do not correspond to a vertex
var vertices = lt_array.arrayMask(vertex_mask);

// break the array into a left and right side to get to from years for  calculating duration and magnitude
var left = vertices.arraySlice(1,0,-1);
var right = vertices.arraySlice(1,1,null);

var startYear = left.arraySlice(0, 0, 1);                       // get year dimension of LT data from the segment start vertices
var startVal = left.arraySlice(0, 2, 3).multiply(dist_dir);     // get spectral index dimension of LT data from the segment start vertices
var endYear = right.arraySlice(0, 0, 1);                        // get year dimension of LT data from the segment end vertices 
var endVal = right.arraySlice(0, 2, 3).multiply(dist_dir);      // get spectral index dimension of LT data from the segment end vertices 

var dur = endYear.subtract(startYear);       // subtract the segment start year from the segment end year to calculate the duration of segments 
var mag = endVal.subtract(startVal);         // substract the segment start index value from the segment end index value to calculate the delta of segments
var rate = mag.divide(dur);                  // calculate the rate of spectral change

// make an array that contains all the segment attributes
var segInfo = ee.Image.cat([startYear.add(1), endYear, startVal, endVal, mag, dur, rate]).toArray(0).mask(vertex_mask.mask());
Map.addLayer(segInfo, {}, 'segment info', false);

// filter by magnitude
var mag_size = -0.2;
var mag_mask = segInfo.arraySlice(0,4,5).lte(mag_size);
var segInfoMasked = segInfo.toArray(0).arrayMask(mag_mask);
Map.addLayer(segInfoMasked, {}, 'segment info masked', false);

//get the most recent year of disturbance that met the magnitude threshold
var yod = segInfoMasked.arraySlice(0,1,2).arrayProject([1]).arrayReduce(ee.Reducer.max(),[0]).arrayFlatten([['yod']]);
Map.addLayer(yod.updateMask(yod.neq(0)), {min:1986, max:2018, palette:['#9400D3', '#4B0082', '#0000FF', '#00FF00', '#FFFF00', '#FF7F00', '#FF0000']}, 'year of most recent disturbance', false);


// var disturbanceImage = ee.Image.cat(segInfoMasked.arraySlice(0,0,1).arrayProject([0]).arrayFlatten([['startYr']]),
//                               segInfoMasked.arraySlice(0,1,2).arrayProject([0]).arrayFlatten([['endYr']]),
//                               segInfoMasked.arraySlice(0,2,3).arrayProject([0]).arrayFlatten([['startVal']]),
//                               segInfoMasked.arraySlice(0,3,4).arrayProject([0]).arrayFlatten([['endVal']]),
//                               segInfoMasked.arraySlice(0,4,5).arrayProject([0]).arrayFlatten([['mag']]),
//                               segInfoMasked.arraySlice(0,5,6).arrayProject([0]).arrayFlatten([['dur']]),
//                               segInfoMasked.arraySlice(0,6,7).arrayProject([0]).arrayFlatten([['rate']]));
                               
// Map.addLayer(disturbanceImage, {}, 'disturbanceImage', false);

// var longTermDisturbance = disturbanceImage.select(['dur']).gte(15);
// var longTermThreshold = disturbanceImage.select(['mag']).gte(-0.25).and(longTermDisturbance);
// var threshold = disturbanceImage.select(['mag']).gte(-0.2);
// var finalDistImg = disturbanceImage.updateMask(threshold.or(longTermThreshold));
// Map.addLayer(finalDistImg, {}, 'finalDistImg');
////////////////////////////////////////////////////////////////////////////////////////////
// Map regrowth
////////////////////////////////////////////////////////////////////////////////////////////
var regrowthMagThresh = 0.2;        //set the threshold to determine recovery year by magnitude
var regrowthRateThresh = 0.02;      //set the threshold to determine recovery year by rate

// use the magnitude of recovery to determine the recovery year
var regrowthMagMask = segInfo.arraySlice(0,4,5).gt(regrowthMagThresh); //slice off the magnitudes and create a binary mask
var regrowthMagSegs = segInfo.toArray(0).arrayMask(regrowthMagMask);   //mask attributes using the magnitude mask
var yrMask = regrowthMagSegs.arraySlice(0,1,2).gt(yod);                //slice off the years and create mask of years greater than  
regrowthMagSegs = regrowthMagSegs.toArray(0).arrayMask(yrMask);
var yor = regrowthMagSegs.arraySlice(0,0,1).arrayProject([1]).arrayReduce(ee.Reducer.min(),[0]).arrayFlatten([['yor']]);
Map.addLayer(yor.updateMask(yor.neq(0)), {min:1986, max:2016, palette:['#9400D3', '#4B0082', '#0000FF', '#00FF00', '#FFFF00', '#FF7F00', '#FF0000']}, 'magnitude based year of recovery', false);

// use the rate of recovery to determine the recovery year
var rateMask = segInfo.arraySlice(0,6,null).gt(regrowthRateThresh);           //slice off the rates and create a binary mask
var regrowthRateSegs = segInfo.toArray(0).arrayMask(rateMask);                //mask attributes using the rate mask
var yrRateMask = regrowthRateSegs.arraySlice(0,1,2).gt(yod);
regrowthRateSegs = regrowthRateSegs.toArray(0).arrayMask(yrRateMask);
var rates = regrowthRateSegs.arraySlice(0,0,1).arrayProject([1]).arrayReduce(ee.Reducer.min(),[0]).arrayFlatten([['yor']]);
Map.addLayer(rates.updateMask(rates.neq(0)), {min:1986, max:2016, palette:['#9400D3', '#4B0082', '#0000FF', '#00FF00', '#FFFF00', '#FF7F00', '#FF0000']}, 'rate based year of recovery', false);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// set parameters for stand age outputs
var year = 2010;                      // year should be between 2000 and 2017
var treeHeightThreshold = 5;          // set a tree height threshold to determine the extent of forest 
var canopyThreshold = 10;             // set a canopy cover threshold to determine the extent of forest
var homogenizeStandAge = false;       // if true a focal mode will be applied to stand age pixels
var minimumMappingUnit = true;        // if true a minimum mapping unit will be applied to filter patches less than the mmu
var minMapUnitSize = 11;              // the number of pixels to be considered a patch, if applied
var scale = 30;                       // set the scale of the raster output
var outName = 'Stand_Age';            // choose an output name, note that the year and province will be automatically added to this name.
var crs = 'EPSG:32648';               // choose an output projection
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// ///////////////////////////////////////////////////////////////////////////////////
// // Get stand age - assumes forest begins regenerating immediately after loss year
// ///////////////////////////////////////////////////////////////////////////////////
// var standAgeMap = getStandAge(year, treeHeightThreshold, canopyThreshold, minMapUnitSize);
// //Map.addLayer(standAgeMap.select(0), {min:0, max:20, palette:'F00,0F0'}, 'Stand Age ' + year);

// if(minimumMappingUnit === true){
//   //Map.addLayer(standAgeMap.select('mmuStandAge'), {min:0, max:20, palette:'F00,0F0'}, 'MMU Stand Age ' + year);
// }

// if (homogenizeStandAge === true){
//   //Map.addLayer(standAgeMap.select('hmStandAge'), {min:0, max:20, palette:'F00,0F0'}, 'Homogenized Stand Age ' + year);
// }

// // Create stand age map
// // this function works specifically with the canopy and tree height primatives
// // it is also assumed that year of disturbance from Landtrendr is used to identify forest change
// function getStandAge(year, treeHeightThreshold, canopyThreshold, minMapUnitSize){
//   year = ee.Number(year);
//   // filter the canopy and height layers to the year of interest
//   var canopyYear = canopy.filter(ee.Filter.calendarRange(year, year, 'year')).first();
//   var heightYear = treeHeight.filter(ee.Filter.calendarRange(year, year, 'year')).first();
//   // get only the canopy and height pixels that meet the thresholds and assign them a value of 1
//   var can = canopyYear.gte(canopyThreshold);
//   var height = heightYear.gte(treeHeightThreshold);
//   // add the canopy and height pixels together - only values of 2 are considered forested
//   var forest = ee.Image(can).add(ee.Image(height)).remap([0,1,2], [0,0,1]).rename('forest');
//   // create a year of disturbance variable locally
//   var yodLocal = yod;
//   // get the forested disturbances
//   var forestDisturbance = yodLocal.updateMask(forest);
//   // get the disturbances for all years prior to the analysis year to be used to mask the disturbances
//   var yodLocalLTYear = yodLocal.lt(year);
//   // mask the forested disturbances to those occuring before the year of interest
//   var priorForestDisturbance = forestDisturbance.updateMask(yodLocalLTYear);
//   // create a constant raster set equal to the analysis year and mask it to the extent of forest disturbance 
//   var yearConstant = ee.Image.constant(year).updateMask(forest);
//   // subtract the year of disturbances that occured prior to year of interest from the year of interest 
//   var standAge = yearConstant.subtract(priorForestDisturbance).rename('standAge');
//   // combine stand age with a forest age constant
//   standAge = standAge.unmask(ee.Image.constant(20), true).updateMask(forest);
//   standAge = standAge.where(standAge.gt(20), 20);

//   var transform = [30,0,0,0,30,0];
//   standAge = standAge.clip(studyArea).reproject(crs, transform);

//   // set image metadata
//   var timeStart = ee.Date.fromYMD(year, 6, 1).millis();
//   standAge = standAge.set('system:time_start', timeStart).set('canopy', canopyThreshold).set('tree_height', treeHeightThreshold);
  
//   // Generate forest mask for optional steps
//   var mask = forest.connectedPixelCount(minMapUnitSize+1, true).gte(minMapUnitSize).reproject(crs,transform);  
  
//   // homogenize stand age
//   if (homogenizeStandAge === true){
//   var clumpSize = standAge.connectedPixelCount(minMapUnitSize+1, true).reproject(crs,transform);
//   var elimMask = clumpSize.gte(minMapUnitSize);
//   var mode  = standAge.focal_mode(minMapUnitSize/2,'circle');
//   var hmStandAge = standAge.where(elimMask.not(),mode).reproject(crs,transform);
//   if (minimumMappingUnit === true){hmStandAge = hmStandAge.updateMask(mask);}
//   hmStandAge = hmStandAge.rename("hmStandAge");
//   hmStandAge = hmStandAge.set('system:time_start', timeStart).set('canopy', canopyThreshold).set('tree_height', treeHeightThreshold);
//   standAge = standAge.addBands(hmStandAge);
//   }
  
//   // apply a minimum mapping unit
//   if(minimumMappingUnit === true){
//     var mmuStandAge = standAge.select(0).updateMask(mask).reproject(crs,transform);
//     mmuStandAge = mmuStandAge.rename("mmuStandAge");
//     mmuStandAge = mmuStandAge.set('system:time_start', timeStart).set('canopy', canopyThreshold).set('tree_height', treeHeightThreshold);
//     standAge = standAge.addBands(mmuStandAge);
//   } 
  
//   //return stand age
//   return standAge.toByte();
// }

// ///////////////////////////////////////////////////////////////////////////////////
// // Export Data to Drive and as an Asset
// ///////////////////////////////////////////////////////////////////////////////////
// print('stand age', standAgeMap);

// Export.image.toDrive({
//   image: standAgeMap, 
//   description: 'Drive_' + provinceName + '_' + outName+ '_' +year, 
//   folder: exportDriveFolder,
//   fileNamePrefix: provinceName + '_' + outName+'_'+year+'_updated',
//   region: studyArea, 
//   scale: scale, 
//   crs: crs, 
//   maxPixels: 1e13
// });

// Export.image.toAsset({
//   image: standAgeMap,
//   description: 'Asset_' + provinceName + '_' + outName+'_'+year, 
//   assetId: exportCollection + '/' + provinceName + '_' + outName+'_'+year+'_updated',
//   region: studyArea, 
//   scale: scale, 
//   crs: crs,
//   maxPixels: 1e13
// });

////////////////////////////////////////////////////////////////////////////////////////////
//Function to convert an image array object to collection
////////////////////////////////////////////////////////////////////////////////////////////
function arrayToTimeSeries(tsArray,yearsArray,possibleYears,bandName){
    //Set up dummy image for handling null values
    var noDateValue = -32768;
    var dummyImage = ee.Image(noDateValue).toArray();
    
    //Ierate across years
    var tsC = possibleYears.map(function(yr){
      yr = ee.Number(yr);
      
      //Pull out given year
      var yrMask = yearsArray.eq(yr);
    
      //Mask array for that given year
      var masked = tsArray.arrayMask(yrMask);
      
      
      //Find null pixels
      var l = masked.arrayLength(0);
      
      //Fill null values and convert to regular image
      masked = masked.where(l.eq(0),dummyImage).arrayGet([-1]);
      
      //Remask nulls
      masked = masked.updateMask(masked.neq(noDateValue)).rename([bandName])      
        .set('system:time_start',ee.Date.fromYMD(yr,6,1).millis());
        
      return masked;
    
    
  });
  return ee.ImageCollection(tsC);
  }
  
//Construct study area, add to map, zoom.
function buildArea(){
  var sA = provinces.filter(ee.Filter.eq("NAME_1", provinceName));
  Map.addLayer(sA,{},"Study Area");
  Map.centerObject(sA, 8);
  return sA;
}

// function to add normalized difference to collection
function normalizedDifference(img){
  img = img.addBands(img.normalizedDifference(['nir', 'red']).rename('ndvi'));
  img = img.addBands(img.normalizedDifference(['nir', 'swir2']).rename('nbr'));
  img = img.addBands(img.normalizedDifference(['green', 'swir1']).rename('ndii'));
  img = img.addBands(img.normalizedDifference(['nir', 'swir1']).rename('ndwi2'));
  return img;
}